package vulnerability

import extraction.Main._logger
import tools.Comparison.{versionOlderThan, versionOlderThanForUnity}

import java.io.IOException
import java.nio.file.Paths
import scala.collection.mutable.ArrayBuffer

object VulnerabilityLinks {

  /**
   * Return a link about security vulnerabilities of the given Android version.
   * Based on https://www.cvedetails.com/vulnerability-list.php?vendor_id=1224&product_id=19997&version_id=&page=3&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=0&cvssscoremax=0&year=0&month=0&cweid=0&order=1&trc=4902&sha=1bd76566e804bd0baf4aa6ef43598ed24565b5b6
   *
   * @param version            the Android API version
   * @param withAndroidGeneral true, if the vulnerabilities found generally in all versions should be included
   * @return the link
   */
  def getAndroidVulnerabilities(version: Int, withAndroidGeneral: Boolean): Array[String] = {
    val array = ArrayBuffer[String]()
    val cveAndroidLink = "https://www.cvedetails.com/cve/"

    try {
      // vulnerabilities of the given version
      var bufferedSource = io.Source.fromFile(
        Paths.get(".").toAbsolutePath + "/src/files/vulnerability_links/AndroidAPI/Android-" + version + ".csv")
      for (cveNumber <- bufferedSource.getLines) {
        array += cveAndroidLink + cveNumber + "/"
      }

      // vulnerabilities found in all versions
      if (withAndroidGeneral) {
        bufferedSource = io.Source.fromFile(
          Paths.get(".").toAbsolutePath + "/src/files/vulnerability_links/AndroidAPI/Android-all.csv")
        for (cveNumber <- bufferedSource.getLines) {
          array += cveAndroidLink + cveNumber + "/"
        }
      }

      bufferedSource.close
    } catch {
      case e: IOException => _logger.warn(s"File ${e.getMessage} is not found")
        array.toArray
    }

    array.toArray
  }

  /**
   * Return a link about security vulnerabilities of the given framework and its version.
   * The frameworks using this function are Cordova, Flutter, Qt, and React Native.
   * The links are written in files/vulnerability_links/framework_name.csv.
   *
   * The links in ... are based on ...
   * - Cordova.csv      : https://www.cvedetails.com/vulnerability-list/vendor_id-45/product_id-27153/Apache-Cordova.html
   * - Flutter.csv      : https://github.com/dart-lang/sdk/security/advisories
   * - Qt.csv           : https://www.cvedetails.com/vulnerability-list/vendor_id-6363/QT.html,
   *                      https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=qt
   * - React Native.csv : https://github.com/facebook/react-native/blob/main/CHANGELOG.md
   * - Xamarin.csv      : https://github.com/xamarin/xamarin-android/search?q=cve&type=issues
   *
   * @param framework the framework name (Cordova, Flutter, Qt, or ReactNative)
   * @param version   the framework version
   * @return the links
   */
  def getFrameworksVulnerabilities(framework: String, version: String): Array[String] = {
    val array = ArrayBuffer[String]()

    try {
      val bufferedSource = io.Source.fromFile(
        Paths.get(".").toAbsolutePath + "/src/files/vulnerability_links/" + framework + ".csv")
      for (line <- bufferedSource.getLines) {
        val cols = line.split(',')
        if (cols(0).equals("-")) {
          if (versionOlderThan(version, cols(1)) == 1) {
            array += cols(2)
          }
        } else if (versionOlderThan(cols(0), version) > -1) {
          if (cols(1).equals("-") || versionOlderThan(version, cols(1)) == 1) {
            array += cols(2)
          }
        }
      }

      bufferedSource.close
    } catch {
      case e: IOException => _logger.error(s"getFrameworksVulnerabilities() throws an error with message: ${e.getMessage}")
        array.toArray
    }

    array.toArray
  }

  /**
   * Return a link about security vulnerabilities of the given Unity version.
   * Based on https://unity.com/security and https://www.cvedetails.com/vulnerability-list/vendor_id-20176/Unity.html
   *
   * @param version the Unity version
   * @return the link
   */
  def getUnityVulnerabilities(version: String): Array[String] = {
    val array = ArrayBuffer[String]()

    if (versionOlderThanForUnity(version, "2020.2.0a11") > -1
      && (version != "2020.2.0a11" || version != "2020.1.0b9"
      || version != "2019.3.14f1" || version != "2018.4.23f1"
      || version != "2017.4.40f1")) {
      array += "https://unity.com/security/unity-sec-2143#vulnerability-details--2"
    }
    if (versionOlderThanForUnity(version, "2019.2.0a7") > -1
      && (version != "2019.2.0a7" || version != "2019.1.0b5"
      || version != "2018.3.7f1" || version != "2018.2.21f1"
      || version != "2017.4.22f1" || version != "5.6.7f1")) {
      array += "https://unity.com/security/unity-sec-1291"
    }
    if (versionOlderThanForUnity(version, "2017.2.0b8") > -1
      && (version != "2017.2.0b8" || version != "2017.1.0p4"
      || version != "5.6.3p1" || version != "5.5.4p3"
      || version != "5.4.5p5" || version != "5.3.8p2")) {
      array += "https://unity.com/security/unity-sec-884"
    }
    if (versionOlderThanForUnity(version, "2023.1.0a26") > -1
      && (version != "2023.1.0a26" || version != "2022.2.3f1"
      || version != "2021.3.17f1" || version != "2020.3.44f1")) {
      array += "https://unity.com/security/jan-2023-01"
    }
    if ((versionOlderThanForUnity(version, "4.6.6f2") == 1)
      || (versionOlderThanForUnity("5.0.0f0", version) > -1
      && versionOlderThanForUnity(version, "5.0.3f2") == 1)) {
      array += "https://www.cvedetails.com/cve/CVE-2020-17507/"
    }

    array.toArray
  }
}
