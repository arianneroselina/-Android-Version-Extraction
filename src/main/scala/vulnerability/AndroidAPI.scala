package vulnerability

import extraction.Main.logger

import java.io.IOException
import java.nio.file.Paths
import scala.collection.mutable.ArrayBuffer

object AndroidAPI {

  /**
   * Return a link about security vulnerabilities of the given Android version.
   * Based on https://www.cvedetails.com/vulnerability-list.php?vendor_id=1224&product_id=19997&version_id=&page=3&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=0&cvssscoremax=0&year=0&month=0&cweid=0&order=1&trc=4902&sha=1bd76566e804bd0baf4aa6ef43598ed24565b5b6
   *
   * @param version the Android API version
   * @param withAndroidGeneral true, if the vulnerabilities found generally in all versions should be included
   * @return the link
   */
  def getVulnerabilities(version: Int, withAndroidGeneral: Boolean): Array[String] = {
    val array = ArrayBuffer[String]()
    val cveAndroidLink = "https://www.cvedetails.com/cve/"

    try {
      // vulnerabilities of the given version
      var bufferedSource = io.Source.fromFile(
        Paths.get(".").toAbsolutePath + "/src/files/cve_links/Android-" + version + ".csv")
      for (cveNumber <- bufferedSource.getLines) {
        array += cveAndroidLink + cveNumber + "/"
      }

      // vulnerabilities found in all versions
      if (withAndroidGeneral) {
        bufferedSource = io.Source.fromFile(
          Paths.get(".").toAbsolutePath + "/src/files/cve_links/Android-all.csv")
        for (cveNumber <- bufferedSource.getLines) {
          array += cveAndroidLink + cveNumber + "/"
        }
      }

      bufferedSource.close
    } catch {
      case e: IOException => logger.error(e.getMessage)
        array.toArray
    }

    array.toArray
  }
}
